import os
import logging
import asyncio
from dotenv import load_dotenv
from keep_alive import keep_alive

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_GROUP_ID = int(os.getenv("SUPPORT_GROUP_ID"))

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å")]], resize_keyboard=True
)
city_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥"),
            KeyboardButton(text="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
            KeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"),
        ]
    ],
    resize_keyboard=True,
)
role_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–§–∏–∑ –ª–∏—Ü–æ"), KeyboardButton(text="–Æ—Ä –ª–∏—Ü–æ")]],
    resize_keyboard=True,
)
contact_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–í —á–∞—Ç–µ"), KeyboardButton(text="–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")]],
    resize_keyboard=True,
)
confirm_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∞—Ç—å –∑–≤–æ–Ω–∫–∞"), KeyboardButton(text="–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å—Ä–∞–∑—É")]
    ],
    resize_keyboard=True,
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ConsultationState(StatesGroup):
    waiting_for_operator_reply = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è —Å–≤—è–∑–∏ –≤ —á–∞—Ç–µ)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–∞ Command)
@dp.message(Command("start", ignore_case=True))
async def start(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ —Ä–µ—à–µ–Ω–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. üèõÔ∏è\n\n"
        "üîπ –ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏.\n"
        "üîπ –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–∞—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.\n\n"
        "üìå <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.</b>", 
        reply_markup=start_kb,
        parse_mode="HTML"
    )


# –ü–µ—Ä–≤—ã–π —à–∞–≥ ‚Äì –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
@dp.message(F.text == "–ù–∞—á–∞—Ç—å")
async def ask_city(message: types.Message):
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=city_kb)

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
@dp.message(F.text.in_(["–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"]))
async def ask_role(message: types.Message):
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}
    user_data[message.from_user.id]["city"] = message.text
    await message.answer("–ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?", reply_markup=role_kb)

# –í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ (—Ñ–∏–∑.–ª–∏—Ü–æ / —é—Ä.–ª–∏—Ü–æ)
@dp.message(F.text.in_(["–§–∏–∑ –ª–∏—Ü–æ", "–Æ—Ä –ª–∏—Ü–æ"]))
async def ask_contact_method(message: types.Message):
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}
    user_data[message.from_user.id]["role"] = message.text
    await message.answer("–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?", reply_markup=contact_kb)

# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏ ‚Äì –≤ —á–∞—Ç–µ –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
@dp.message(F.text.in_(["–í —á–∞—Ç–µ", "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"]))
async def ask_name(message: types.Message):
    user_data[message.from_user.id]["contact_method"] = message.text
    if user_data[message.from_user.id]["role"] == "–Æ—Ä –ª–∏—Ü–æ":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
    else:
        await message.answer("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ (–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏) –∏ –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@dp.message(lambda m: m.from_user.id in user_data and "name" not in user_data[m.from_user.id])
async def ask_query(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏, –ª–∏–±–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
@dp.message(lambda m: m.from_user.id in user_data and "query" not in user_data[m.from_user.id])
async def ask_phone(message: types.Message, state: FSMContext):
    user_data[message.from_user.id]["query"] = message.text
    if user_data[message.from_user.id]["contact_method"] == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    else:
        # –ï—Å–ª–∏ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ "–í —á–∞—Ç–µ", –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        await confirm_contact(message, state, phone_input=False)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± ¬´–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É¬ª)
@dp.message(lambda m: m.from_user.id in user_data 
            and user_data[m.from_user.id].get("contact_method") == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
            and "phone" not in user_data[m.from_user.id])
async def process_phone(message: types.Message, state: FSMContext):
    await confirm_contact(message, state, phone_input=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async def confirm_contact(message: types.Message, state: FSMContext, phone_input: bool):
    if phone_input:
        user_data[message.from_user.id]["phone"] = message.text
    else:
        user_data[message.from_user.id]["phone"] = "‚Äî"

    user_info = user_data[message.from_user.id]
    phone = user_info["phone"]

    msg = (
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
        f"üèô –ì–æ—Ä–æ–¥: {user_info.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë§ –°—Ç–∞—Ç—É—Å: {user_info.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìû –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {user_info.get('contact_method', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìõ –ò–º—è/–ö–æ–º–ø–∞–Ω–∏—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üí¨ –ó–∞–ø—Ä–æ—Å: {user_info.get('query', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üÜî User ID: {message.from_user.id}"
    )

    if SUPPORT_GROUP_ID:
        await bot.send_message(SUPPORT_GROUP_ID, msg)

    if user_info["contact_method"] == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        await message.answer("–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=confirm_kb)
    else:
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ —á–∞—Ç–µ.")
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await state.set_state(ConsultationState.waiting_for_operator_reply)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–≤ —á–∞—Ç–µ)
@dp.message(ConsultationState.waiting_for_operator_reply)
async def handle_user_query(message: types.Message, state: FSMContext):
    user_info = user_data.get(message.from_user.id, {})
    # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–∫–∞–∂–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /reply, —É–±–∏—Ä–∞–µ–º –µ—ë
    cleaned_query = message.text.lstrip("/reply").strip()

    msg = (
        f"üí¨ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç–µ!\n\n"
        f"üèô –ì–æ—Ä–æ–¥: {user_info.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë§ –°—Ç–∞—Ç—É—Å: {user_info.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìõ –ò–º—è/–ö–æ–º–ø–∞–Ω–∏—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí¨ –ó–∞–ø—Ä–æ—Å: {cleaned_query}\n"
        f"üÜî User ID: {message.from_user.id}"
    )

    if SUPPORT_GROUP_ID:
        await bot.send_message(SUPPORT_GROUP_ID, msg)

    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.")
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /reply
@dp.message(Command("reply", ignore_case=True))
async def operator_reply(message: types.Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /reply user_id —Ç–µ–∫—Å—Ç")
        return
    try:
        user_id = int(args[1])
        response_text = args[2]
        await bot.send_message(
            user_id,
            f"‚úâÔ∏è *–û—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:*\n\n{response_text}",
            parse_mode="Markdown",
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§–æ–ª–±—ç–∫-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–µ—à–∞ (–∫–æ–º–∞–Ω–¥–∞), —Ç–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∑–¥–µ—Å—å.
@dp.message()
async def default_handler(message: types.Message):
    if message.text and message.text.startswith("/"):
        return
    if message.from_user.id not in user_data:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞.",
            reply_markup=start_kb,
        )
    elif message.text == "–ù–∞—á–∞—Ç—å":
        await ask_city(message)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    keep_alive()  # –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è ¬´–∂–∏–≤–æ—Å—Ç–∏¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ Repl.it)
    asyncio.run(main())
