import os
import logging
import asyncio
import json
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.storage.redis import RedisStorage

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_GROUP_ID = os.getenv("SUPPORT_GROUP_ID")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=RedisStorage.from_url("redis://localhost:6379"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å")]], resize_keyboard=True
)
city_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥"), KeyboardButton(text="–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω"), KeyboardButton(text="–î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞")]],
    resize_keyboard=True,
)
role_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–§–∏–∑ –ª–∏—Ü–æ"), KeyboardButton(text="–Æ—Ä –ª–∏—Ü–æ")]],
    resize_keyboard=True,
)
contact_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–í —á–∞—Ç–µ"), KeyboardButton(text="–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")]],
    resize_keyboard=True,
)
type_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–Æ—Ä–∏—Å—Ç"), KeyboardButton(text="–ê–¥–≤–æ–∫–∞—Ç")]],
    resize_keyboard=True,
)

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
class ConsultationState(StatesGroup):
    waiting_for_city = State()
    waiting_for_custom_city = State()
    waiting_for_role = State()
    waiting_for_type = State()
    waiting_for_contact_method = State()
    waiting_for_name = State()
    waiting_for_query = State()
    waiting_for_phone = State()
    waiting_for_operator_reply = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async def notify_support(data: dict):
    msg = (
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
        f"üèô –ì–æ—Ä–æ–¥: {data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë§ –°—Ç–∞—Ç—É—Å: {data.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìû –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {data.get('contact_method', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìõ –ò–º—è/–ö–æ–º–ø–∞–Ω–∏—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üì≤ –ù–µ–æ–±—Ö–æ–¥–∏–º: {data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üí¨ –ó–∞–ø—Ä–æ—Å: {data.get('query', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üÜî User ID: {data.get('user_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    )
    try:
        await bot.send_message(SUPPORT_GROUP_ID, msg)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")

@dp.message(Command("start", ignore_case=True))
async def start(message: types.Message, state: FSMContext):
    await state.set_data({"user_id": message.from_user.id})
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ —Ä–µ—à–µ–Ω–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. üèõÔ∏è\n\n"
        "üîπ –ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏.\n"
        "üîπ –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–∞—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.\n\n"
        "üìå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=start_kb,
    )
    await ConsultationState.waiting_for_city.set()

@dp.message(ConsultationState.waiting_for_city, F.text == "–ù–∞—á–∞—Ç—å")
async def ask_city(message: types.Message, state: FSMContext):
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=city_kb)

@dp.message(ConsultationState.waiting_for_city, F.text.in_(["–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω", "–î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞"]))
async def ask_custom_city(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
    await ConsultationState.waiting_for_custom_city.set()

@dp.message(ConsultationState.waiting_for_custom_city)
async def save_custom_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?", reply_markup=role_kb)
    await ConsultationState.waiting_for_role.set()

@dp.message(ConsultationState.waiting_for_city, F.text.in_(["–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"]))
async def ask_role(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?", reply_markup=role_kb)
    await ConsultationState.waiting_for_role.set()

@dp.message(ConsultationState.waiting_for_role, F.text.in_(["–§–∏–∑ –ª–∏—Ü–æ", "–Æ—Ä –ª–∏—Ü–æ"]))
async def ask_type(message: types.Message, state: FSMContext):
    await state.update_data(role=message.text)
    explanation = (
        "üîπ –ê–¥–≤–æ–∫–∞—Ç ‚Äì –≤–µ–¥–µ—Ç —É–≥–æ–ª–æ–≤–Ω—ã–µ –¥–µ–ª–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤ —Å—É–¥–µ, –æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É.\n"
        "üîπ –Æ—Ä–∏—Å—Ç ‚Äì –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –±–∏–∑–Ω–µ—Å—É, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤ —Å—É–¥–µ, –æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É."
    )
    await message.answer(f"–ö—Ç–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º?\n\n{explanation}", reply_markup=type_kb)
    await ConsultationState.waiting_for_type.set()

@dp.message(ConsultationState.waiting_for_type, F.text.in_(["–ê–¥–≤–æ–∫–∞—Ç", "–Æ—Ä–∏—Å—Ç"]))
async def ask_contact_method(message: types.Message, state: FSMContext):
    await state.update_data(type=message.text)
    await message.answer("–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?", reply_markup=contact_kb)
    await ConsultationState.waiting_for_contact_method.set()

@dp.message(ConsultationState.waiting_for_contact_method, F.text.in_(["–í —á–∞—Ç–µ", "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"]))
async def ask_name(message: types.Message, state: FSMContext):
    await state.update_data(contact_method=message.text)
    prompt = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏." if (await state.get_data()).get("role") == "–Æ—Ä –ª–∏—Ü–æ" else "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
    await message.answer(prompt, reply_markup=ReplyKeyboardRemove())
    await ConsultationState.waiting_for_name.set()

@dp.message(ConsultationState.waiting_for_name)
async def ask_query(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å.")
    await ConsultationState.waiting_for_query.set()

@dp.message(ConsultationState.waiting_for_query)
async def ask_phone_or_confirm(message: types.Message, state: FSMContext):
    await state.update_data(query=message.text)
    data = await state.get_data()
    if data.get("contact_method") == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        await ConsultationState.waiting_for_phone.set()
    else:
        await confirm_contact(message, state)

@dp.message(ConsultationState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await confirm_contact(message, state)

async def confirm_contact(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data.setdefault("phone", "‚Äî")
    data["consultation_active"] = True
    data["user_id"] = message.from_user.id
    await state.update_data(**data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    await notify_support(data)

    if data.get("contact_method") == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∂–¥–∞—Ç—å –∑–≤–æ–Ω–∫–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É: \n"
            "üìû [ +7 (911) 458-39-39](tel:+79114583939)",
            parse_mode="Markdown"
        )
    else:
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ —á–∞—Ç–µ.")
    
    await ConsultationState.waiting_for_operator_reply.set()

@dp.message(ConsultationState.waiting_for_operator_reply, F.chat.type == "private")
async def forward_user_message_to_operator(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data.get("consultation_active"):
        try:
            await bot.send_message(
                SUPPORT_GROUP_ID,
                f"üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:*\n\n"
                f"üë§ {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìû {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üí¨ {message.text}\n\n"
                f"üÜî User ID: {message.from_user.id}",
                parse_mode="Markdown",
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")
    else:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")

@dp.message(Command("reply", ignore_case=True))
async def operator_reply(message: types.Message, state: FSMContext):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /reply user_id —Ç–µ–∫—Å—Ç")
        return
    try:
        user_id = int(args[1])
        response_text = args[2]
        await bot.send_message(
            user_id,
            f"‚úâÔ∏è *–û—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:*\n\n{response_text}",
            parse_mode="Markdown",
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.message(F.chat.type == "private", F.text.startswith("/reply"))
async def handle_reply_from_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data.get("consultation_active"):
        try:
            await bot.send_message(
                SUPPORT_GROUP_ID,
                f"üì© *–û—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:*\n\n"
                f"üë§ {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìû {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üí¨ {message.text}\n\n"
                f"üÜî User ID: {message.from_user.id}",
                parse_mode="Markdown",
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")
    else:
        await message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")

async def main():
    try:
        await dp.start_polling(bot)
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
