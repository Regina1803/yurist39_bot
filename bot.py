import os
import logging
import asyncio
import json
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.storage.redis import RedisStorage
from redis import Redis

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
SUPPORT_GROUP_ID = int(os.getenv("SUPPORT_GROUP_ID"))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis

redis_client = Redis(host='localhost', port=6379, decode_responses=True)
storage = RedisStorage.from_url("redis://localhost:6379")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Redis —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def save_user_data(user_id, data):
    try:
        redis_client.setex(f"user:{user_id}", 1800, json.dumps(data))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def get_user_data(user_id):
    try:
        data = redis_client.get(f"user:{user_id}")
        return json.loads(data) if data else {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å")]], resize_keyboard=True
)
city_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥"),
            KeyboardButton(text="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
            KeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"),
        ]
    ],
    resize_keyboard=True,
)
role_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–§–∏–∑ –ª–∏—Ü–æ"), KeyboardButton(text="–Æ—Ä –ª–∏—Ü–æ")]],
    resize_keyboard=True,
)
contact_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–í —á–∞—Ç–µ"), KeyboardButton(text="–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")]],
    resize_keyboard=True,
)
# confirm_kb –æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–ª—É—á–∞–π –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
confirm_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–¥–æ–∂–¥–∞—Ç—å –∑–≤–æ–Ω–∫–∞"), KeyboardButton(text="–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å—Ä–∞–∑—É")]],
    resize_keyboard=True,
)

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
class ConsultationState(StatesGroup):
    waiting_for_operator_reply = State()

@dp.message(Command("start", ignore_case=True))
async def start(message: types.Message):
    save_user_data(message.from_user.id, {})
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ —Ä–µ—à–µ–Ω–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. üèõÔ∏è\n\n"
        "üîπ –ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏.\n"
        "üîπ –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–∞—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.\n\n"
        "üìå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=start_kb,
    )

@dp.message(F.text == "–ù–∞—á–∞—Ç—å")
async def ask_city(message: types.Message):
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=city_kb)

@dp.message(F.text.in_(["–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"]))
async def ask_role(message: types.Message):
    user_data = get_user_data(message.from_user.id)
    user_data["city"] = message.text
    save_user_data(message.from_user.id, user_data)
    await message.answer("–ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?", reply_markup=role_kb)

@dp.message(F.text.in_(["–§–∏–∑ –ª–∏—Ü–æ", "–Æ—Ä –ª–∏—Ü–æ"]))
async def ask_contact_method(message: types.Message):
    user_data = get_user_data(message.from_user.id)
    user_data["role"] = message.text
    save_user_data(message.from_user.id, user_data)
    await message.answer("–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?", reply_markup=contact_kb)

@dp.message(F.text.in_(["–í —á–∞—Ç–µ", "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"]))
async def ask_name(message: types.Message):
    user_data = get_user_data(message.from_user.id)
    user_data["contact_method"] = message.text
    save_user_data(message.from_user.id, user_data)
    
    if user_data.get("role") == "–Æ—Ä –ª–∏—Ü–æ":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.")
    else:
        await message.answer("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")

# –ï—Å–ª–∏ –∏–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
@dp.message(lambda m: "name" not in get_user_data(m.from_user.id))
async def ask_query(message: types.Message):
    user_data = get_user_data(message.from_user.id)
    user_data["name"] = message.text
    save_user_data(message.from_user.id, user_data)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å.")

# –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
@dp.message(lambda m: "query" not in get_user_data(m.from_user.id))
async def ask_phone(message: types.Message, state: FSMContext):
    user_data = get_user_data(message.from_user.id)
    user_data["query"] = message.text
    save_user_data(message.from_user.id, user_data)

    if user_data.get("contact_method") == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    else:
        await confirm_contact(message, state, phone_input=False)

# –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(lambda m: get_user_data(m.from_user.id).get("contact_method") == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
async def process_phone(message: types.Message, state: FSMContext):
    await confirm_contact(message, state, phone_input=True)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–∫–µ
async def confirm_contact(message: types.Message, state: FSMContext, phone_input: bool):
    user_data = get_user_data(message.from_user.id)
    user_data["phone"] = message.text if phone_input else "‚Äî"
    save_user_data(message.from_user.id, user_data)

    msg = (
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
        f"üèô –ì–æ—Ä–æ–¥: {user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë§ –°—Ç–∞—Ç—É—Å: {user_data.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìû –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {user_data.get('contact_method', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìõ –ò–º—è/–ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üí¨ –ó–∞–ø—Ä–æ—Å: {user_data.get('query', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üÜî User ID: {message.from_user.id}"
    )

    if SUPPORT_GROUP_ID:
        try:
            await bot.send_message(SUPPORT_GROUP_ID, msg)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")

    if user_data.get("contact_method") == "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É":
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∂–¥–∞—Ç—å –∑–≤–æ–Ω–∫–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É: \n"
            "üìû [ +7 (911) 458-39-39](tel:+79114583939)",
            parse_mode="Markdown"
        )
    else:
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ —á–∞—Ç–µ.")

    await state.set_state(ConsultationState.waiting_for_operator_reply)

# –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –≤ SUPPORT_GROUP_ID
@dp.message(F.chat.type == "private", F.text.not_startswith("/reply"))
async def forward_user_message_to_operator(message: types.Message, state: FSMContext):
    user_data = get_user_data(message.from_user.id)
    if user_data.get("consultation_active"):
        try:
            await bot.send_message(
                SUPPORT_GROUP_ID,
                f"üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:*\n\n"
                f"üë§ {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìû {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üí¨ {message.text}\n\n"
                f"üÜî User ID: {message.from_user.id}",
                parse_mode="Markdown",
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏)
@dp.message(Command("reply", ignore_case=True))
async def operator_reply(message: types.Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /reply user_id —Ç–µ–∫—Å—Ç")
        return
    user_id_str = args[1]
    response_text = args[2]
    try:
        user_id = int(user_id_str)
        await bot.send_message(
            user_id,
            f"‚úâÔ∏è *–û—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:*\n\n{response_text}",
            parse_mode="Markdown",
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        # –§–ª–∞–≥ consultation_active –æ—Å—Ç–∞—ë—Ç—Å—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º,
        # –ø–æ—ç—Ç–æ–º—É –ª—é–±—ã–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def restart_bot():
    while True:
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            await dp.start_polling(bot)
        except Exception as e:
            logger.error(f"–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π,
            # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–µ–æ—Å–≤–æ–±–æ–∂–¥—ë–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            await bot.session.close()
            await storage.close()
        logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(5)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        await restart_bot()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
